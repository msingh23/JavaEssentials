Design Pattern
- Think of designing classes in a way to be able to resist maximum maintaince during CHANGE.
- Design should be open to extension but closed for modification.
	- Thus coding to an interface instead of a concrete implementation(new class) shield from potential changes when new subclasses are added.
	
	
STEPS FOR INTERVIEW QUESTIONS TECHNICAL
	- clarify the questions
	- Example which is not small, specific or special case.
	- Brute force.
	- Optimize
		- look for any unused information
		- start with fresh example if stuck
		- solve it incorrectly and then try fix the errors.
		- make time vs space tradeoff Sometimes using a variable upfront may help to acheive a better runtime.
		- preprocessing may help like sorting and some other computation.
		- walk through the algorithm and figure out the structure. writing pseudocode helps.
	-IMPLEMENT THE CODE 
		- Think about modularity, boilerplate code(initializing an input or preparing a data) which can 
		be declared and implemented later. 
	- TEST THE CODE
		- look for hotspots- integer divisions,  null node in binary tree, base case in recursion, start and end of iteration in linked list.


IMPORTANT THINGS TO REMEMBER
	-(Chap2-94) The recursive algorithm can take at least O(n) space where n is the depth of the recursive call. 